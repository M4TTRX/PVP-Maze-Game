/*#include "../src/MazeConstructor.h"

#include <vector>
#include <time.h>
#include<iostream>
#include<string>
#include "../src/MazeSquare.h"
#include "items.h"
using namespace std;

MazeConstructor::MazeConstructor(int size) {
	srand(time(NULL));
	mazeSize = size;

	maze.resize(mazeSize);	//set number of rows

	for (int y = 0; y < mazeSize; y++) {
		auto row = maze.at(y);
		for (int x = 0; x < mazeSize; x++)
		{
			row.emplace_back(x, y);
		}
		maze.at(y) = row;
	}

	xStart = 0;	// randomly decide which cell the maze generator will start in
	yStart = 0;
	int depth = 0;	//used to determine longest path
	int maxDepth = 0;
	maze[xStart][yStart].visited = true;
	squareStack.push_back(maze[xStart][yStart]);	//squareStack begins with start cell in it


	while (!squareStack.empty()) {	//body of the algorithm, runs until backtracked to the beginning and there are no more cells to visit
		MazeSquare currentSquare = squareStack.back();

		vector<string> direction_to_go = {};	//companion vector to options that stores which direction you would go by going to the corresponding square in options. Used to figure out which walls to remove
		currentSquare.visited = true;	//ensure we won't revisit this square unless backtracking

		int currentX = currentSquare.x;
		int current_y = currentSquare.y;

		MazeSquare downSquare, upSquare, rightSquare, leftSquare;
		if ((current_y + 1) < size)	//ensure there is a square below this one
			downSquare = maze[currentX][current_y + 1];
		else (downSquare = maze[0][0]);
		if (!downSquare.visited) {	//check square below this one
			direction_to_go.push_back("down");
		}
		if ((current_y - 1) >= 0)	//ensure there is a square above this one
			upSquare = maze[currentX][current_y - 1];
		else (upSquare = maze[0][0]);
		if (!upSquare.visited) {	//check square above this one
			direction_to_go.push_back("up");
		}
		if ((currentX + 1) < size)	//ensure there is a square right of this one
			rightSquare = maze[currentX + 1][current_y];
		else (rightSquare = maze[0][0]);
		if (!rightSquare.visited) {	//check square right of this one
			direction_to_go.push_back("right");
		}
		if ((currentX - 1) >= 0)	//ensure there is a square left of this one
			leftSquare = maze[currentX - 1][current_y];
		else (leftSquare = maze[0][0]);
		if (!leftSquare.visited) {	//check square left of this one
			direction_to_go.push_back("left");
		}
		if (direction_to_go.empty()) {	//no more valid cells to go to, backtrack
			int placeItem = rand() % 3;	//1/3 chance to put an item in square
			if (placeItem == 0){
				//TODO: choose random item to place here
			}
			if(depth > maxDepth){
				maxDepth = depth;
				correctPath = squareStack;
			}
			squareStack.pop_back();
			maze[currentSquare.x][currentSquare.y] = currentSquare;
			depth -= 1;
		}
		else {
			int randNum = rand() % direction_to_go.size();	//choose one direction to go out of available

			string chosenDirection = direction_to_go[randNum];	//check which direction we're going to reach new cell

			MazeSquare newSquare(0, 0);	// newsquare is the square that's going to be the current Square at the next iteration
			if (chosenDirection == "up") {	//depending on direction, remove walls from current and new cell
				currentSquare.upWall = false;
				newSquare = upSquare;
				newSquare.downWall = false;
			}
			else if (chosenDirection == "down") {
				currentSquare.downWall = false;
				newSquare = downSquare;
				newSquare.upWall = false;
			}
			else if (chosenDirection == "right") {
				currentSquare.rightWall = false;
				newSquare = rightSquare;
				newSquare.leftWall = false;
			}
			else {
				currentSquare.leftWall = false;
				newSquare = leftSquare;
				newSquare.rightWall = false;
			}
			maze[currentSquare.x][currentSquare.y] = currentSquare;
			squareStack.back() = currentSquare;
			squareStack.push_back(newSquare);	//put new cell on back of stack
			depth += 1;
		}
	}
	correctPath.back().goal = true;	//TODO: replace with goal object once implemented
}

MazeConstructor::~MazeConstructor(){
	if (maze != nullptr){
		for (int y = 0; y < mazeSize; y++){
			if (maze[y] != nullptr){
				delete[] maze[y];
				maze[y] = nullptr;
			}
		}
		delete[] maze;
		maze = nullptr;
	}
}
*/

