/*
 * pauseScreen.cpp
 *
 *  Created on: Nov 17, 2018
 *      Author: Daniel Kim
 */
#pragma once
#include <string>
#include <vector>
#include "ScreenController.h"
#include <iostream>
#include <fstream>
using namespace std;
#include "SFML/Graphics.hpp"
#include "MazeConstructor.h"
#include "GameControll.h"
#include "HumanPlayer.h"
#include "Item.h"
#define SIZE 16

void GameScreen::endScreen(sf::RenderWindow& window, int whoWins) {

	sf::RectangleShape rectangle(sf::Vector2f(120, 50));
	rectangle.setSize(sf::Vector2f(500, 50));
	rectangle.setFillColor(sf::Color::Black);

	sf::Vector2<int> mou;
	vector<sf::Text> buttonText;
	vector<sf::RectangleShape> buttonBlock;
	sf::Font font;
	font.loadFromFile("text/olympiccarriersuperital.ttf");
	sf::Text text1;

	for (int i = 0; i < 2; i++) {
		buttonText.push_back(sf::Text());
		buttonBlock.push_back(sf::RectangleShape(sf::Vector2f(620, 50)));
	}
	if (whoWins == 1) {
		text1.setString("Player 1 Wins");
	} else
		text1.setString("Player 2 Wins");
	text1.setCharacterSize(47);
	text1.setFont(font);
	text1.setFillColor(sf::Color::Cyan);
	buttonText[0].setString("Main Menu");
	buttonText[1].setString("EXIT");

	for (int i = 0; i < 2; i++) {
		buttonText[i].setCharacterSize(24);
		buttonText[i].setFont(font);
		buttonText[i].setPosition(320.f, 325.f + (60.f * i));
		buttonText[i].setFillColor(sf::Color::Blue);
		buttonBlock[i].setFillColor(sf::Color::Green);
		buttonBlock[i].setOutlineColor(sf::Color::Red);
		buttonBlock[i].setPosition(10.f, 300.f + (60.f * i));

	}
	bool stayOpen = true;
	while (stayOpen) {

		sf::Event event;
		mou = sf::Mouse::getPosition(window);

		while (window.pollEvent(event)) {
			for (int i = 0; i < 2; i++) {
				if (mou.x > 10 && mou.x < 630 && mou.y > 300 + (60.f * i)
						&& mou.y < 350 + (60.f * i)) {
					buttonBlock[i].setOutlineThickness(5);
				} else {
					buttonBlock[i].setOutlineThickness(0);
				}
			}
			if (event.type == sf::Event::MouseButtonPressed) {
				if (mou.x > 10 && mou.x < 630 && mou.y > 300 && mou.y < 350) {
					stayOpen = false;
					TitleScreen s;
					sf::Music z;
					z.openFromFile("sounds/despacito.ogg");
					z.play();
					z.setLoop(true);
					z.setVolume(10);
					z.setPitch(1.5);
					s.StartGame(window, z);

				} else if (mou.x > 10 && mou.x < 630 && mou.y > 360
						&& mou.y < 410) {
					window.close();

				}
			}

		}
		window.clear();
		window.draw(rectangle);
		window.draw(text1);
		for (int i = 0; i < 2; i++) {
			window.draw(buttonBlock[i]);
			window.draw(buttonText[i]);
		}
		//  window.draw(sprite);
		window.display();

	}

}

bool PauseMenu::PauseGame(sf::RenderWindow& window) {

	sf::RenderWindow window2(sf::VideoMode(640, 480), "");
	sf::RectangleShape rectangle(sf::Vector2f(120, 50));
	rectangle.setSize(sf::Vector2f(500, 50));
	rectangle.setFillColor(sf::Color::Black);

	sf::Vector2<int> mou;
	vector<sf::Text> buttonText;
	vector<sf::RectangleShape> buttonBlock;
	sf::Font font;
	font.loadFromFile("text/olympiccarriersuperital.ttf");
	sf::Text text1;

	for (int i = 0; i < 2; i++) {
		buttonText.push_back(sf::Text());
		buttonBlock.push_back(sf::RectangleShape(sf::Vector2f(620, 50)));
	}

	text1.setString("PAUSE SCREEN");
	text1.setPosition(160.f, 100.f);
	text1.setCharacterSize(37);
	text1.setFont(font);
	text1.setFillColor(sf::Color::Cyan);
	buttonText[0].setString("RESUME GAME");
	buttonText[1].setString("EXIT");

	for (int i = 0; i < 2; i++) {
		buttonText[i].setCharacterSize(24);
		buttonText[i].setFont(font);
		buttonText[i].setPosition(320.f, 325.f + (60.f * i));
		buttonText[i].setFillColor(sf::Color::Blue);
		buttonBlock[i].setFillColor(sf::Color::Green);
		buttonBlock[i].setOutlineColor(sf::Color::Red);
		buttonBlock[i].setPosition(10.f, 300.f + (60.f * i));

	}
	while (window2.isOpen()) {

		sf::Event event;
		mou = sf::Mouse::getPosition(window2);

		while (window2.pollEvent(event)) {
			for (int i = 0; i < 2; i++) {
				if (mou.x > 10 && mou.x < 630 && mou.y > 300 + (60.f * i)
						&& mou.y < 350 + (60.f * i)) {
					buttonBlock[i].setOutlineThickness(5);
				} else {
					buttonBlock[i].setOutlineThickness(0);
				}
			}
			if (event.type == sf::Event::MouseButtonPressed) {
				if (mou.x > 10 && mou.x < 630 && mou.y > 300 && mou.y < 350) {
					window2.close();
				} else if (mou.x > 10 && mou.x < 630 && mou.y > 360
						&& mou.y < 410) {
					window2.close();

					return false;

				}
			}

			switch (event.type) {
			case sf::Event::Closed:
				window2.close();
				break;
			case sf::Event::KeyPressed:
				if (event.key.code == sf::Keyboard::R)
					window2.close();
				else if (event.key.code == sf::Keyboard::T)
					window2.close();
				break;
			default:
				break;
			}

		}
		window2.clear();
		window2.draw(rectangle);
		window2.draw(text1);
		for (int i = 0; i < 2; i++) {
			window2.draw(buttonBlock[i]);
			window2.draw(buttonText[i]);
		}
		//  window.draw(sprite);
		window2.display();

	}
	return true;
}

sf::Texture setUpTexture(std::string fileName) {
	sf::Texture texture;
	if (!texture.loadFromFile("Textures//" + fileName)) {
		std::cout << "Error loading " << fileName << '\n';
	}
	texture.setSmooth(true);	// smoothens the texture if resized

	return texture;
}

void GameScreen::Game(sf::RenderWindow& window, bool AI) {

	sf::RectangleShape grid[2 * SIZE + 1][SIZE];
	sf::Time elapsed;
	sf::Time elapsed2;
	sf::Clock clock;

	sf::Clock clock2;
	sf::Vector2<int> mou;
	// =========== Load Textures ===========

	//	No wall Texture
	sf::Texture no_wall = setUpTexture("no_wall.jpg");

	//	One wall Textures
	sf::Texture bottom = setUpTexture("bottom.jpg");
	sf::Texture top = setUpTexture("top.jpg");
	sf::Texture left = setUpTexture("left.jpg");
	sf::Texture right = setUpTexture("right.jpg");

	// Two wall Textures
	sf::Texture left_right = setUpTexture("left_right.jpg");
	sf::Texture top_bottom = setUpTexture("top_bottom.jpg");

	// Corner Textures
	sf::Texture bottom_left_corner = setUpTexture("bottom_left_corner.jpg");
	sf::Texture bottom_right_corner = setUpTexture("bottom_right_corner.jpg");
	sf::Texture top_left_corner = setUpTexture("top_left_corner.jpg");
	sf::Texture top_right_corner = setUpTexture("top_right_corner.jpg");

	// Dead End Textures
	sf::Texture left_dead_end = setUpTexture("left_dead_end.jpg");
	sf::Texture right_dead_end = setUpTexture("right_dead_end.jpg");
	sf::Texture bottom_dead_end = setUpTexture("bottom_dead_end.jpg");
	sf::Texture top_dead_end = setUpTexture("top_dead_end.jpg");

	// =========== Generate the maze ===========

	MazeConstructor maze_constructor(SIZE);
	vector<vector<MazeSquare>> maze_1 = maze_constructor.maze;
	vector<vector<MazeSquare>> maze_2 = maze_constructor.maze;

	//=============PLAYER 1 SPRITES=======

	sf::Texture p1UP;
	p1UP.loadFromFile("sprite_1_up.png");
	sf::Texture p1DOWN;
	p1DOWN.loadFromFile("sprite_1_down.png");
	sf::Texture p1RIGHT;
	p1RIGHT.loadFromFile("sprite_1_right.png");
	sf::Texture p1LEFT;
	p1LEFT.loadFromFile("sprite_1_left.png");

	//=============PLAYER 2 SPRITES ==========
	sf::Texture p2UP;
	p2UP.loadFromFile("sprite_2_up.png");
	sf::Texture p2DOWN;
	p2DOWN.loadFromFile("sprite_2_down.png");
	sf::Texture p2RIGHT;
	p2RIGHT.loadFromFile("sprite_2_right.png");
	sf::Texture p2LEFT;
	p2LEFT.loadFromFile("sprite_2_left.png");
	//Generate pause image
	sf::Texture pause;
	pause.loadFromFile("pause.png");
	sf::Sprite spriteforpause;
	spriteforpause.setTexture(pause);

	spriteforpause.setColor(sf::Color::White);
	spriteforpause.setPosition(SIZE * 40.0f, 20.0f);
	//=============Generate Human Player ============
	sf::Texture texture;
	sf::Vector2f v1(16.5f, 16.5f);
	sf::Vector2f v2(SIZE * 43.5f, 16.5f);
	texture.loadFromFile("character.png");
	HumanPlayer hPlayer(p1DOWN, maze_1, v1, maze_constructor.xGoal,
			maze_constructor.yGoal);
	HumanPlayer hPlayer2(p2DOWN, maze_2, v2, maze_constructor.xGoal,
			maze_constructor.yGoal);

	//============Final location box ===========

	sf::Texture endBox;
	endBox.loadFromFile("finish.png");
	sf::Sprite finalRect;
	finalRect.setTexture(endBox);
	finalRect.setPosition(maze_constructor.xGoal * 40,
			maze_constructor.yGoal * 40);
	//finalRect.setFillColor(sf::Color::Red);
	//final location box 2
	sf::Texture endBox2;
	endBox2.loadFromFile("finish.png");
	sf::Sprite finalRect2;
	//sf::RectangleShape finalRect2(sf::Vector2f(40.f, 40.f));
	//finalRect2.setSize(sf::Vector2f(40.f, 40.f));
	finalRect2.setTexture(endBox2);
	finalRect2.setPosition(maze_constructor.xGoal * 40 + 43.0f * SIZE,
			maze_constructor.yGoal * 40);
	//finalRect2.setFillColor(sf::Color::Red);

	//===========ITEMS============
	//sf::Texture item = setUpTexture("speed_boost.png");
	sf::Texture item2;
	item2.loadFromFile("freeze.png");
	sf::Texture item;
//	item2.loadFromFile("speed_boost.png");
	/*sf::Sprite item_overlay2;
	 item_overlay2.setTexture(item2);*/
	sf::Sprite item_overlay;
	item_overlay.setTexture(item);
	sf::Texture grey = setUpTexture("grey.png");
	sf::Sprite deleteitem;
	deleteitem.setTexture(grey);

	sf::Texture item3 = setUpTexture("speed_boost.png");
	//sf::Texture item5 = setUpTexture("freeze.png");
	sf::Texture item4 = setUpTexture("speed_boost.png");
	sf::Texture item6 = setUpTexture("speed_boost.png");
	//sf::Texture item4 = setUpTexture("freeze.png");
	//loading the file
	//creating a vector with an array of 7 sprites
	vector<sf::Sprite> itemspeed(225, sf::Sprite(item3));
	vector<sf::Sprite> itemslow(225, sf::Sprite(item2));
	vector<sf::Sprite> item3speed(225, sf::Sprite(item4));
	vector<sf::Sprite> item4slow(225, sf::Sprite(item2));
	//=============show if player has item==========
	sf::Font font;
	font.loadFromFile("text/olympiccarriersuperital.ttf");
	sf::Text text1;
	text1.setString("P1 ITEM:");
	text1.setPosition(100.f, 650.f);
	text1.setCharacterSize(37);
	text1.setFont(font);
	text1.setFillColor(sf::Color::Cyan);
	sf::Font font2;
	font2.loadFromFile("text/olympiccarriersuperital.ttf");
	sf::Text text2;
	text2.setString("P2 ITEM:");
	text2.setPosition(850.f, 650.f);
	text2.setCharacterSize(37);
	text2.setFont(font);
	text2.setFillColor(sf::Color::Cyan);
	//AI STUFFS
	srand(time(NULL));	//CHANGED: ADD THIS STUFF
	maze_constructor.correctPath.erase(maze_constructor.correctPath.begin());
	int randDirection = 5;
	int randDirection2 = 5;
	int makeError = 1;

	// ===========	END OF SETUP  ===========
	bool stayOpen = true;
	int rand();
	int movespeed = 100;
	int movespeed2 = 100;
	int getItem[SIZE][2];
	int slowItem[SIZE][2];
	int whichItem = 0;
	int count;
	int count2;
	int count3;
	int count4;
	int count5;
	int count6;
	int showItem = 0;
	int showItem2 = 0;
	int random[SIZE][SIZE];
	bool haveItem = false;
	bool haveItem2 = false;

	for (int i = 0; i < SIZE; i++) {
		for (int j = 0; j < SIZE; j++) {
			random[i][j] = rand();
		}
	}
	bool item_test = false;
	bool item_test2 = false;

	while (stayOpen) {

		sf::Event event;
		mou = sf::Mouse::getPosition(window);
		while (window.pollEvent(event)) {
			//Pause Screen

			if (event.type == sf::Event::MouseButtonPressed) {
				if (mou.x > SIZE * 40.0f && mou.x < SIZE * 40.0f + 0.5f
						&& mou.y > 20.0f && mou.y < 20.0f + 2.f) {
					PauseMenu p;
					stayOpen = p.PauseGame(window);
				}
			}
			switch (event.type) {
			case sf::Event::Closed:
				window.close();

				break;
			case sf::Event::KeyPressed:
				if (event.key.code == sf::Keyboard::P
						|| event.key.code == sf::Keyboard::Escape) {
					PauseMenu p;
					stayOpen = p.PauseGame(window);
				}
				break;
			default:
				break;
			}

			window.clear();

		}
		if (AI) {//CHANGED: ALL THE STUFF IN HERE. MAKES SURE IT'S OUT OF THE EVENTPOLLING BLOCK
			elapsed2 = clock2.getElapsedTime();
			if (elapsed2.asMilliseconds() > movespeed2 + 100
					&& hPlayer2.canInput) {

				int destinationX = maze_constructor.correctPath.front().x;
				int destinationY = maze_constructor.correctPath.front().y;
				makeError = rand() % 50;
				if (makeError == 0) {
					randDirection = rand() % 4;
					randDirection2 = rand() % 4;
				}

				if (randDirection == 0) {
					hPlayer2.canInput = false;
					maze_constructor.correctPath.insert(
							maze_constructor.correctPath.begin(),
							maze_1[hPlayer2.x][hPlayer2.y]);
					hPlayer2.moveLeft(elapsed2);
					clock2.restart();
					randDirection = 5;

				} else if (randDirection == 1) {
					hPlayer2.canInput = false;
					maze_constructor.correctPath.insert(
							maze_constructor.correctPath.begin(),
							maze_1[hPlayer2.x][hPlayer2.y]);
					hPlayer2.moveRight(elapsed2);
					clock2.restart();
					randDirection = 5;

				} else if (randDirection == 2) {
					hPlayer2.canInput = false;
					maze_constructor.correctPath.insert(
							maze_constructor.correctPath.begin(),
							maze_1[hPlayer2.x][hPlayer2.y]);
					hPlayer2.moveUp(elapsed2);
					clock2.restart();
					randDirection = 5;

				} else if (randDirection == 3) {
					hPlayer2.canInput = false;
					maze_constructor.correctPath.insert(
							maze_constructor.correctPath.begin(),
							maze_1[hPlayer2.x][hPlayer2.y]);
					hPlayer2.moveDown(elapsed2);
					clock2.restart();
					randDirection = 5;
				} else if (randDirection2 == 0) {
					hPlayer2.canInput = false;
					maze_constructor.correctPath.insert(
							maze_constructor.correctPath.begin(),
							maze_1[hPlayer2.x][hPlayer2.y]);
					hPlayer2.moveLeft(elapsed2);
					clock2.restart();
					randDirection2 = 5;
				} else if (randDirection2 == 1) {
					hPlayer2.canInput = false;
					maze_constructor.correctPath.insert(
							maze_constructor.correctPath.begin(),
							maze_1[hPlayer2.x][hPlayer2.y]);
					hPlayer2.moveRight(elapsed2);
					clock2.restart();
					randDirection2 = 5;
				} else if (randDirection2 == 2) {
					hPlayer2.canInput = false;
					maze_constructor.correctPath.insert(
							maze_constructor.correctPath.begin(),
							maze_1[hPlayer2.x][hPlayer2.y]);
					hPlayer2.moveUp(elapsed2);
					clock2.restart();
					randDirection2 = 5;
				} else if (randDirection2 == 3) {
					hPlayer2.canInput = false;
					maze_constructor.correctPath.insert(
							maze_constructor.correctPath.begin(),
							maze_1[hPlayer2.x][hPlayer2.y]);
					hPlayer2.moveDown(elapsed2);
					clock2.restart();
					randDirection2 = 5;
				} else if (hPlayer2.x > destinationX) {
					hPlayer2.canInput = false;
					hPlayer2.moveLeft(elapsed2);
					clock2.restart();
					maze_constructor.correctPath.erase(
							maze_constructor.correctPath.begin());
				} else if (hPlayer2.x < destinationX) {
					hPlayer2.canInput = false;
					hPlayer2.moveRight(elapsed2);
					clock2.restart();
					maze_constructor.correctPath.erase(
							maze_constructor.correctPath.begin());
				} else if (hPlayer2.y > destinationY) {
					hPlayer2.canInput = false;
					hPlayer2.moveUp(elapsed2);
					clock2.restart();
					maze_constructor.correctPath.erase(
							maze_constructor.correctPath.begin());
				} else if (hPlayer2.y < destinationY) {
					hPlayer2.canInput = false;
					hPlayer2.moveDown(elapsed2);
					clock2.restart();
					maze_constructor.correctPath.erase(
							maze_constructor.correctPath.begin());
				} else if (hPlayer2.y == destinationY
						&& hPlayer2.x == destinationX) {
					clock2.restart();
					maze_constructor.correctPath.erase(
							maze_constructor.correctPath.begin());
				}
			}
		}

		window.clear();	//CHANGED: MOVED FROM IN THE EVENTPOLLING BLOCK TO OUTSIDE OF IT
		sf::Vector2f cellSize(40.0f, 40.0f);
		count = 0;
		count2 = 0;
		count3 = 0;
		count4 = 0;
		count5 = 0;
		count6 = 0;
		// Display Maze 1
		for (int x = 0; x < SIZE; x++) {
			for (int y = 0; y < SIZE; y++) {
				grid[x][y].setSize(cellSize);
				// grid[x][y].setOutlineColor(sf::Color::Blue);
				//item drop rates
				if (random[x][y] % 33 == 1
						&& random[x][y] != random[hPlayer.xf][hPlayer.yf]) {
					item_test = true;
					getItem[count][0] = x;
					getItem[count][1] = y;
					count++;
				} else if (random[x][y] % 36 == 2 && random[x][y] % 30 != 1
						&& random[x][y] != random[hPlayer.xf][hPlayer.yf]) {
					item_test2 = true;
					slowItem[count2][0] = x;
					slowItem[count2][1] = y;
					count2++;
				} else {
					item_test = false;
					item_test2 = false;
				}
				// -- Decide which texture to apply --
				MazeSquare sq = maze_1[x][y];

				// Check dead end first
				if (sq.upWall && sq.downWall && sq.rightWall) {
					grid[x][y].setTexture(&right_dead_end);
				} else if (sq.upWall && sq.downWall && sq.leftWall) {
					grid[x][y].setTexture(&left_dead_end);
				} else if (sq.upWall && sq.rightWall && sq.leftWall) {
					grid[x][y].setTexture(&top_dead_end);
				} else if (sq.downWall && sq.rightWall && sq.leftWall) {
					grid[x][y].setTexture(&bottom_dead_end);
				}
				//	Then check Corners and corridors
				else if (sq.upWall && sq.downWall) {
					grid[x][y].setTexture(&top_bottom);
				} else if (sq.leftWall && sq.rightWall) {
					grid[x][y].setTexture(&left_right);
				}

				else if (sq.downWall && sq.leftWall) {
					grid[x][y].setTexture(&bottom_left_corner);
				} else if (sq.downWall && sq.rightWall) {
					grid[x][y].setTexture(&bottom_right_corner);
				} else if (sq.upWall && sq.leftWall) {
					grid[x][y].setTexture(&top_left_corner);
				} else if (sq.upWall && sq.rightWall) {
					grid[x][y].setTexture(&top_right_corner);
				}
				// Check single wall last
				else if (sq.downWall) {
					grid[x][y].setTexture(&bottom);
				} else if (sq.upWall) {
					grid[x][y].setTexture(&top);
				} else if (sq.leftWall) {
					grid[x][y].setTexture(&left);
				} else if (sq.rightWall) {
					grid[x][y].setTexture(&right);
					//sq.item_test = true;
				} else {
					grid[x][y].setTexture(&no_wall);
				}
				// ---------------------------------

				//	Set position of grid and draw
				grid[x][y].setPosition(x * cellSize.x + 5.0f,
						y * cellSize.y + 5.0f);
				window.draw(grid[x][y]);

				if (item_test) {
					itemspeed[count5].setPosition(x * cellSize.x + 5.0f,
							y * cellSize.y + 5.0f);
					window.draw(itemspeed[count5++]);
					item3speed[count3].setPosition(
							(x + SIZE + 1) * cellSize.x + 5.0f,
							y * cellSize.y + 5.0f);
					count3++;

				}
				if (item_test2) {
					itemslow[count6].setPosition(x * cellSize.x + 5.0f,
							y * cellSize.y + 5.0f);
					window.draw(itemslow[count6++]);
					item4slow[count4].setPosition(
							(x + SIZE + 1) * cellSize.x + 5.0f,
							y * cellSize.y + 5.0f);
					count4++;
				}
			}

			// Display Maze 2
			for (int x = SIZE + 1; x < 2 * SIZE + 1; x++) {
				for (int y = 0; y < SIZE; y++) {
					grid[x][y].setSize(cellSize);
					// grid[x][y].setOutlineColor(sf::Color::Blue);
					int X = x - SIZE - 1;// allows for accessing the maze object
					// -- Decide which texture to apply --
					MazeSquare sq = maze_2[X][y];
					//get random items
					if (random[x - SIZE - 1][y] % 33 == 1
							&& random[x - SIZE - 1][y]
									!= random[hPlayer.xf][hPlayer.yf]) {
						item_test = true;
					} else if (random[x - SIZE - 1][y] % 36 == 2
							&& random[x - SIZE - 1][y] % 30 != 1
							&& random[x - SIZE - 1][y]
									!= random[hPlayer.xf][hPlayer.yf]) {
						item_test2 = true;
					} else {
						item_test = false;
						item_test2 = false;
					}
					// Check dead end first
					if (sq.upWall && sq.downWall && sq.rightWall) {
						grid[x][y].setTexture(&right_dead_end);
					} else if (sq.upWall && sq.downWall && sq.leftWall) {
						grid[x][y].setTexture(&left_dead_end);
					} else if (sq.upWall && sq.rightWall && sq.leftWall) {
						grid[x][y].setTexture(&top_dead_end);
					} else if (sq.downWall && sq.rightWall && sq.leftWall) {
						grid[x][y].setTexture(&bottom_dead_end);
					}
					//	Then check Corners and corridors
					else if (sq.upWall && sq.downWall) {
						grid[x][y].setTexture(&top_bottom);
					} else if (sq.leftWall && sq.rightWall) {
						grid[x][y].setTexture(&left_right);
					}

					else if (sq.downWall && sq.leftWall) {
						grid[x][y].setTexture(&bottom_left_corner);
					} else if (sq.downWall && sq.rightWall) {
						grid[x][y].setTexture(&bottom_right_corner);
					} else if (sq.upWall && sq.leftWall) {
						grid[x][y].setTexture(&top_left_corner);
					} else if (sq.upWall && sq.rightWall) {
						grid[x][y].setTexture(&top_right_corner);
					}
					// Check single wall last
					else if (sq.downWall) {
						grid[x][y].setTexture(&bottom);
					} else if (sq.upWall) {
						grid[x][y].setTexture(&top);
					} else if (sq.leftWall) {
						grid[x][y].setTexture(&left);
					} else if (sq.rightWall) {
						grid[x][y].setTexture(&right);
						//sq.item_test = true;
					} else {
						grid[x][y].setTexture(&no_wall);
					}
					// ---------------------------------

					//	Set position of grid and draw
					grid[x][y].setPosition(x * cellSize.x + 5.0f,
							y * cellSize.y + 5.0f);
					window.draw(grid[x][y]);

					if (item_test) {
						/*sf::Sprite item_overlay(item);
						 item_overlay.setPosition(x * cellSize.x + 5.0f,
						 y * cellSize.y + 5.0f);
						 // draw the item
						 window.draw(item_overlay);
						 */
						/*item3speed[count3].setPosition(x * cellSize.x + 5.0f,
						 y * cellSize.y + 5.0f);
						 window.draw(item3speed[count3++]);*/
					}
					if (item_test2) {
						/*sf::Sprite item_overlay2;
						 item_overlay2.setTexture(item2);
						 item_overlay2.setPosition(x * cellSize.x + 5.0f,
						 y * cellSize.y + 5.0f);
						 // draw the item
						 window.draw(item_overlay2);*/
						/*item4slow[count4].setPosition(x * cellSize.x + 5.0f,
						 y * cellSize.y + 5.0f);
						 window.draw(item4slow[count4++]);*/
					}
				}
			}
		}
		//window.display();
		//draw items for maze 2
		for (int i = 0; i < count3; i++) {
			window.draw(item3speed[i]);
		}
		for (int i = 0; i < count4; i++) {
			window.draw(item4slow[i]);
		}

		elapsed = clock.getElapsedTime();
		elapsed2 = clock2.getElapsedTime();

		if (elapsed.asMilliseconds() > movespeed) {
			//Humanplayer 1
			if (sf::Keyboard::isKeyPressed(sf::Keyboard::W) && hPlayer.canInput
					&& elapsed.asMilliseconds() != 0
					&& elapsed2.asMilliseconds() != 0) {
				hPlayer.getImage(p1UP);
				hPlayer.canInput = false;
				hPlayer.moveUp(elapsed);
				clock.restart();

				//hPlayer.canInput = true;

			} else if (sf::Keyboard::isKeyPressed(sf::Keyboard::S)
					&& hPlayer.canInput && elapsed.asMilliseconds() != 0
					&& elapsed2.asMilliseconds() != 0) {
				hPlayer.getImage(p1DOWN);
				hPlayer.canInput = false;
				hPlayer.moveDown(elapsed);
				clock.restart();
				//hPlayer.canInput = true;

			} else if (sf::Keyboard::isKeyPressed(sf::Keyboard::D)
					&& hPlayer.canInput && elapsed.asMilliseconds() != 0
					&& elapsed2.asMilliseconds() != 0) {
				hPlayer.getImage(p1RIGHT);
				hPlayer.canInput = false;
				hPlayer.moveRight(elapsed);
				clock.restart();
				//hPlayer.canInput = true;

			} else if (sf::Keyboard::isKeyPressed(sf::Keyboard::A)
					&& hPlayer.canInput && elapsed.asMilliseconds() != 0
					&& elapsed2.asMilliseconds() != 0) {
				hPlayer.getImage(p1LEFT);
				hPlayer.canInput = false;
				hPlayer.moveLeft(elapsed);
				clock.restart();
				//hPlayer.canInput = true;
			}
		}
		if (!AI) {
			if (elapsed2.asMilliseconds() > movespeed2) {
				//HumanPlayer 2
				if (sf::Keyboard::isKeyPressed(sf::Keyboard::Up)
						&& hPlayer2.canInput && elapsed.asMilliseconds() != 0
						&& elapsed2.asMilliseconds() != 0) {
					hPlayer2.getImage(p2UP);
					hPlayer2.canInput = false;
					hPlayer2.moveUp(elapsed2);
					clock2.restart();
					//hPlayer.canInput = true;

				} else if (sf::Keyboard::isKeyPressed(sf::Keyboard::Down)
						&& hPlayer2.canInput && elapsed.asMilliseconds() != 0
						&& elapsed2.asMilliseconds() != 0) {
					hPlayer2.getImage(p2DOWN);
					hPlayer2.canInput = false;
					hPlayer2.moveDown(elapsed2);
					clock2.restart();
					//hPlayer.canInput = true;

				} else if (sf::Keyboard::isKeyPressed(sf::Keyboard::Right)
						&& hPlayer2.canInput && elapsed.asMilliseconds() != 0
						&& elapsed2.asMilliseconds() != 0) {
					hPlayer2.getImage(p2RIGHT);
					hPlayer2.canInput = false;
					hPlayer2.moveRight(elapsed2);
					clock2.restart();
					//hPlayer.canInput = true;

				} else if (sf::Keyboard::isKeyPressed(sf::Keyboard::Left)
						&& hPlayer2.canInput && elapsed.asMilliseconds() != 0
						&& elapsed2.asMilliseconds() != 0) {
					hPlayer2.getImage(p2LEFT);
					hPlayer2.canInput = false;
					hPlayer2.moveLeft(elapsed2);
					clock2.restart();
					//hPlayer.canInput = true;
				}
			}
		}

		window.draw(finalRect);
		window.draw(finalRect2);
		window.draw(spriteforpause);
		window.draw(hPlayer);
		window.draw(hPlayer2);

		//getITEM
		for (int i = 0; i < count; i++) {
			if (hPlayer.getx == getItem[i][0]
					&& hPlayer.gety == getItem[i][1]) {
				haveItem = true;
				whichItem = 1;
				//movespeed -= 10;
				itemspeed[i].setColor(sf::Color::Transparent);
				getItem[i][0] = -1000;
				getItem[i][1] = -1000;
				showItem = 1;
			} else if (hPlayer2.getx == getItem[i][0]
					&& hPlayer2.gety == getItem[i][1]) {
				haveItem2 = true;
				whichItem = 1;
				//movespeed -= 10;
				item3speed[i].setColor(sf::Color::Transparent);
				getItem[i][0] = -1000;
				getItem[i][1] = -1000;
				showItem2 = 1;
			}
		}
		for (int i = 0; i < count2; i++) {
			if (hPlayer.getx == slowItem[i][0]
					&& hPlayer.gety == slowItem[i][1]) {
				haveItem = true;
				whichItem = 2;
				//movespeed -= 10;
				itemslow[i].setColor(sf::Color::Transparent);
				slowItem[i][0] = -1000;
				slowItem[i][1] = -1000;
				showItem = 2;

			} else if (hPlayer2.getx == slowItem[i][0]
					&& hPlayer2.gety == slowItem[i][1]) {
				whichItem = 2;
				haveItem2 = true;
				item4slow[i].setColor(sf::Color::Transparent);
				//movespeed -= 10;
				slowItem[i][0] = -1000;
				slowItem[i][1] = -1000;
				showItem2 = 2;
			}

		}
		//HAVE ITEM

		if (sf::Keyboard::isKeyPressed(sf::Keyboard::F) && movespeed >= 0
				&& haveItem && whichItem == 1) {
			movespeed = 50;
			haveItem = false;
			whichItem = 0;
			showItem = 0;
		} else if (sf::Keyboard::isKeyPressed(sf::Keyboard::F) && movespeed >= 0
				&& haveItem && whichItem == 2) {
			movespeed2 = 200;
			haveItem = false;
			whichItem = 0;
			showItem = 0;
		}
		if (sf::Keyboard::isKeyPressed(sf::Keyboard::L) && movespeed2 >= 0
				&& haveItem2 && whichItem == 1) {
			movespeed2 = 50;
			haveItem2 = false;
			whichItem = 0;
			showItem2 = 0;
		} else if (sf::Keyboard::isKeyPressed(sf::Keyboard::L)
				&& movespeed2 >= 0 && haveItem2 && whichItem == 2) {
			movespeed = 200;
			haveItem2 = false;
			whichItem = 0;
			showItem2 = 0;
		}
		if (AI && movespeed2 >= 0 && haveItem2 && whichItem == 1) {
			movespeed2 = 50;
			haveItem2 = false;
			whichItem = 0;
			showItem2 = 0;
		} else if (AI && movespeed2 >= 0 && haveItem2 && whichItem == 2) {
			movespeed = 200;
			haveItem2 = false;
			whichItem = 0;
			showItem2 = 0;
		}

		if (showItem == 1) {
			sf::Sprite item_overlay2;
			item_overlay2.setTexture(item6);
			item_overlay2.setPosition(265.f, 660.f);
			// draw the item
			window.draw(item_overlay2);
		} else if (showItem == 2) {
			sf::Sprite item_overlay2;
			item_overlay2.setTexture(item2);
			item_overlay2.setPosition(265.f, 660.f);
			// draw the item
			window.draw(item_overlay2);
		} else {
			sf::Sprite item_overlay2;
			item_overlay2.setTexture(grey);
			item_overlay2.setPosition(265.f, 660.f);
			// draw the item
			window.draw(item_overlay2);
		}
		if (showItem2 == 1) {
			sf::Sprite item_overlay3;
			item_overlay3.setTexture(item6);
			item_overlay3.setPosition(1015.f, 660.f);
			// draw the item
			window.draw(item_overlay3);
		} else if (showItem2 == 2) {
			sf::Sprite item_overlay3;
			item_overlay3.setTexture(item2);
			item_overlay3.setPosition(1015.f, 660.f);
			// draw the item
			window.draw(item_overlay3);
		} else {
			sf::Sprite item_overlay3;
			item_overlay3.setTexture(grey);
			item_overlay3.setPosition(1015.f, 660.f);
			// draw the item
			window.draw(item_overlay3);
		}
		window.draw(text1);
		window.draw(text2);
		window.display();
		if (hPlayer.isEnd == true) {
			endScreen(window, 1);
			//stayOpen = false;

		} else if (hPlayer2.isEnd == true) {
			endScreen(window, 2);
			//stayOpen = false;
		}
	}
}

int main() {
	sf::RenderWindow window(sf::VideoMode(1400, 800), "SFML works!");
	TitleScreen w;
	sf::Music z;
	z.openFromFile("sounds/despacito.ogg");
	z.play();
	z.setLoop(true);
	z.setVolume(10);
	z.setPitch(1.5);
	w.StartGame(window, z);

}
